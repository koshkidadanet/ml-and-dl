import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras.layers import Dense

#Обучающая выборка

c = np.array([-40, -10, 0, 8, 15, 22, 38])#градусы цельсия
f = np.array([-40, 14, 32, 46, 59, 72, 100])#соответствующие градусы фаринг


#Sequential - класс модуля keras, который создает модель многослойной нейронки, в которой слои идут друг за другом
#рис1
model = keras.Sequential()
#создаем слой нейронов полносвязной нейронной сети с помощью класса Dence
#units - количество нейронов в скрытом слое
# input_shape - сколько входов(в данном случае 1 (градусы цельсия) а второй вход(bias) создаем автоматич
#activation - активац ф-ия
#линейная, так как нам нужно получить на выходе значение, зависящее от входа
model.add(Dense(units=1, input_shape=(1,), activation='linear'))
#Структура нейронки определена. Настало врямя ее скомпилировать
#loss - критерий кач-ва у нас срежний квадрат ошибок
#optimizer - метод оптимизации(помогает избежать медленный движ на пологих уч-ках, у нас адам
#параметр adam (у нас 0.1) - шаг сходимости данного алгоритма(град спуска) по умолч 0.001
model.compile(loss='mean_squared_error', optimizer=keras.optimizers.Adam(0.1))
#нейронная сеть сгенерирована, создана с начальными рандомными весовыми коэффицентами
#опишем алгоритм обучения, используя метод fit
#c - входные значения цельсий
#f - требуемые значения фаринг
#epochs - число эпох то есть мы 500 раз пропустим входной вектор и на каждой итерации будем вычислять критерий кач-ва
 #verbose = 0 - значит, что мы не будем выводить служебную инфу в консоль
history = model.fit(c, f, epochs=500, verbose = 0)
print("Обучение завершено")
#для подачи значений тестовой выборки используем метод predict
print(model.predict([100]))#100 град цельсия(212 град)
#какие весовые кэфы получились с помощью метода get_weights
print(model.get_weights())

#вывод графика.
#Обращаемся к переменной history, потом к словарю history, и в словаре есть парамерт(ключ) loss, содержащий наш критерий кач-ва для каждой эпохи
plt.plot(history.history['loss'])
plt.grid(True)
plt.show()
